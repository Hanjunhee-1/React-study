이번에는 지금까지 배운 것들을 토대로 시계를 만드는 실습을 해볼 것이다.

우선 시간을 보여주는 시계 컴포넌트를 생성했다.
```
    // Clock.jsx
    function Clock(props) {
        return (
            <div>
                <h1>Hello, React!</h1>
                <h2>현재 시간: {new Date().toLocaleTimeString()}</h2>
            </div>
        );
    }

    export default Clock;
```
'{}' 중괄호로 둘러쌓인 부분은 JavaScript 문법을 사용하는 부분이다. 


그리고 index.js 에 아래의 내용을 추가해주었다.
```
    // index.js
    import Clock from './03_실습_시계만들기/Clock';
    ...

    setInterval(() => {
        root.render(
            <React.StrictMode>
                <Clock/>
            </React.StrictMode>  )
    }, 1000);
```
여기서 사용한 setInterval() 이라는 함수는 웹 페이지의 특정 부분을 주기적으로 업데이트 해줘야 할 때 사용하는 함수이다.
첫번째 인자로는 실행할 코드를 받고 두번째 인자로 ms 단위의 시간을 입력받는다. 
즉, index.js 의 추가된 코드를 해석해보자면 1초마다 렌더링을 해주는 것이다. 

※  왜 1초마다 렌더링 해줘야 할까...?
    현재 Clock 컴포넌트에서 시간을 보여주고 있기는 하지만 그 함수는 말 그대로 '딱 한 번만' 시간을 보여주고 끝낸다.
    즉, 시간은 계속 흐르고 있음에도 Element 가 렌더링 된 그 순간의 시간만을 보여주게 되는 것이다. 때문에 
    setInterval() 함수를 통해 1초마다 해당 컴포넌트를 렌더링하게끔 해야 우리가 원하는 정상적인 시계의 기능을 할 수 있는 것이다.

index.js 에서 원래 root 를 렌더링해주던 코드 밑에 새로 위의 예시를 추가했는데 이랬더니 React 프로젝트를 시작했을 때
탭이 2개가 뜬다... 해당 문제는 나중에 수정을 해야할 것 같다....


--------------------------------------------------------------------------------------------------------------------------------

위의 문제들을 해결할 방법을 찾았다.
기존의 문제점은 Clock 컴포넌트를 위해 root 전체를 새로 렌더링 해야한다는 것이 문제였다.
이렇게 되면 root 에 존재하는 다른 컴포넌트들도 렌더링이 되고 결국 성능상의 문제가 생길 수 밖에 없다.

내가 원하는 것은 Clock 컴포넌트에서 알아서 현재 시간에 대한 상태를 관리하는 것이었다.

아래와 같이 Clock.jsx 와 index.js 를 수정해주었다.
```
    // index.js
    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(
        <React.StrictMode>
            <Library />
            <ConfirmDialog/>
            <Clock/>
        </React.StrictMode>,
        document.getElementById('root')
    );
```
index.js 에서 기존에 사용하던 setInterval() 부분은 주석처리해주었다.

```
    // Clock.jsx
    import React from "react";
    class Clock extends React.Component {
        constructor(props) {
            super(props);
            this.state = { date: new Date() };
        }

        componentDidMount() {
            this.timerId = setInterval(() => this.setTime(), 1000)
        }

        componentWillUnmount() {
            clearInterval(this.timerId);
        }

        setTime() {
            this.setState({
                date: new Date()
            });
        }

        render() {
            return (
                <div>
                    <h1>Hello, React!</h1>
                    <h2>현재 시간: {this.state.date.toLocaleTimeString()}</h2>
                </div>
            )
        }
    }

    export default Clock;
```

솔직히 말하면 위의 코드를 아직은 정확히 이해하지 못했지만 뭐가 뭔지는 알것 같다.

일단 기존에 Clock 컴포넌트를 함수로 선언했는데 알아서 상태관리를 하게 하기 위해서는 class 로 바꿔줘야했다.
그래서 class 로 바꿔준 다음에 React 의 Component 클래스를 상속받도록 해주었다.

그다음 현재 class 의 생성자를 선언해주었다. 
생성자의 매개변수로 props 를 받는데 현재 index.js 에서 Clock 컴포넌트를 사용할 때 따로 사용하는 속성들이 없고
그냥 <Clock/> 이런식으로 컴포넌트를 사용하기 때문에 사용은 하지 않는다.

생성자 내부에서 super(props); 를 통해 부모클래스, 그러니까 Component 클래스의 생성자를 사용하는 것이다.
안의 내용을 슬쩍 보았는데 워낙 내용이 많아서 pass 다...

그다음으로 가장 중요한 것. 오직 이것을 위해 코드를 수정했다... 나중에 배울 내용을 먼저 살짝 예습해보는 식으로 찾아본다는 것은 좋으나
이해하는게 꽤나 힘들었다.
this.state 이다. 

※  난 Clock 에서 state 라는 변수를 선언한 적이 없다...?
    물론 선언한 적은 없지만 상속을 받았다. 즉, state 는 Component 클래스의 변수를 this 키워드를 통해
    자식클래스인 Clock 에서 사용하는 것이다. 

state 에 json 객체를 할당하였는데 date: new Date() 라는 내용을 작성했다.
state 에 있는 이 date 의 값을 통해 렌더링을 해줄 것이다.

componentDidMount() 와 componentWillUnmount() 를 설명하기 전에 
setTime() 함수를 먼저 볼것이다.

setTime() 함수는 내가 따로 작성한 함수로 state 의 date 의 값을 새로운 시간으로 설정하는 함수이다.
해당 함수 내부에서 setState() 라는 함수를 사용했는데 setState() 함수는 state 변수를 관리하는 함수정도로만 알고 있으면 될 것 같다.

※  state 의 값을 직접 수정하면 안될까...?
    직접 수정하면 컴포넌트를 다시 렌더링하지 않는다... 오직 setState() 함수에서만 state 의 값을 수정해주어야 한다.

이제 componentDidMount() 함수를 볼 것이다.
이 부분이 매 초마다 setTime() 함수를 호출하여 state 의 date 값을 현재의 시간으로 설정해주는 부분이다.
setInterval() 함수를 사용하는 것도 알겠고 setTime() 함수를 사용하는 것도 알겠는데 this.timerId 는 왜 쓰는 걸까...

이건 솔직히 잘 모르겠는데 상태관리를 할 때 생명주기라는 것이 있다고 한다.
현재 Clock 컴포넌트는 렌더링 될 때마다 시간을 설정해야 하는데 React 에서는 이것을 "마운팅" 이라고 한다.
마운팅 해준 것이 있다면 언마운팅해주는 부분도 필요하다고 한다. 그래서 언마운팅할 때 사용하기 위해 this.timerId 라는 곳에
setInterval() 함수 실행 내용을 저장하고 componentWillUnmount() 함수에서 clearInterval() 함수를 사용하여 언마운팅 해준다.

★  setInterval() 과 clearInterval() 에 대한 사용방법 참고링크
    https://curryyou.tistory.com/328

※  componentWillUnmount() 가 없으면 에러가 날까?
    테스트를 해본 결과 에러가 나지 않는다. 그리고 componentDidMount() 에서도 this.timerId 에 굳이 setInterval() 함수 실행 내용을 저장할 필요도 없다.
    왜냐하면 componentDidMount() 함수는 페이지가 렌더링 된 후에 내용이 실행되기 때문이다.


이제 render() 함수를 통해 렌더링만 해주면 Clock 컴포넌트에서 해줄 것은 다 끝난 것이다.
현재 시간에 대한 정보는 this.state.date.toLocaleTimeString() 을 통해 알수 있다.

더 자세한 정보는 아래의 참고링크를 보면 된다.

참고링크: 
https://ko.reactjs.org/docs/state-and-lifecycle.html