★  Element 의 정의

    (1) React 앱을 구성하는 가장 작은 블록들이다. 

        HTML 을 배웠다면 DOM Element 가 떠오를 것이다.
        DOM Element 는 Chrome 개발자 도구에서 'Elements' 라는 탭에서 볼 수 있는데
        우리가 작성한 HTML 태그들로 이루어져있다. 즉, 우리가 실제로 화면에서 볼 수 있는 것들을
        뜻하는 것이다.

        ※  React Element 와 DOM Element 의 차이는 무엇일까?

            React 에는 Virtual DOM 이라는 것이 존재했다. 이 Virtual DOM 은
            rendering 했을 때 우리의 눈에 직접적으로 보이지 않고 DOM Element 의 형태로 보이게 되는데
            이 때 Virtual DOM 을 React Element 라고 한다.

    (2) React Element 는 화면에서 보이는 것들을 기술한다.


★  Element 의 생김새

    React Element 는 JavaScript 객체 형태로 존재한다.
    아래의 Element 예시를 보자.
    ```
        {
            type: 'button',
            props: {
                className: 'bg-green',
                children: {
                    type: 'b',
                    props: {
                        children: 'Hello, React!'
                    }
                } 
            }
        }
    ```
    'type' 은 html 태그를 말한다. 위의 Element 를 오로지 html 태그로만 작성한다면
    아래의 HTML 코드처럼 될 것이다.
    ```
        <button className="bg-green">
            <b>Hello, React!</b>
        </button>
    ``` 

    하지만 'type' 에 string 형태로 들어가는 것이 아닌 자신이 생성한 다른 컴포넌트가 들어갈 수도 있다.
    아래의 Element 예시를 보자
    ```
        {
            type: Button,
            props: {
                color: 'green',
                children: 'Hello, React!'
            }
        }
    ```




    Element 가 어떻게 생겼는지 알았으니 실제 코드를 보며 확인해보자.
    /실습_Element알아보기 디렉토리로 이동하여 코드를 작성했다.
    ```
        // Button.jsx
        function Button(props) {
            return (
                <button className={`bg-${props.color}`}>
                    <b>
                        {props.children}
                    </b>
                </button>
            )
        }

        export default Button;
    ```
    ```
        // ConfirmDialog.jsx
        import Button from "./Button"

        function ConfirmDialog(props) {
            return (
                <div>
                    <p>내용을 확인하셨으면 확인 버튼을 눌러주세요</p>
                    <Button color='green'>확인</Button>
                </div>
            )
        }

        export default ConfirmDialog
    ```



    이렇게 했을 때 생성된 ConfirmDialog 의 Element 는 다음과 같을 것이다.
    ```
        // ConfirmDialog 의 Element 모습
        {
            type: 'div',
            props: {
                children: [
                    {
                        type: 'p',
                        props: {
                            children: '내용을 확인하셨으면 확인 버튼을 눌러주세요'
                        }
                    },
                    {
                        type: Button,
                        props: {
                            color: 'green',
                            children: '확인'
                        }
                    }
                ]
            }
        }
    ```
    위의 Element 처럼 생성이 될 것이다. 하지만 결국 Button 컴포넌트의 Element 도 생성하여 합치게 되므로 최종 모습은 아래와 같을 것이다.

    ```
        // ConfirmDialog 의 Element 최종 모습
        {
            type: 'div',
            props: {
                children: [
                    {
                        type: 'p',
                        props: {
                            children: '내용을 확인하셨으면 확인 버튼을 눌러주세요'
                        }
                    },
                    {
                        type: 'button',
                        props: {
                            className: 'bg-green',
                            children: {
                                type: 'b',
                                props: {
                                    children: '확인'
                                }
                            }
                        }
                    }
                ]
            }
        }
    ```


    
    ※  Element 의 구조를 알아두는 것은 컴포넌트를 작성하고 이해하는데 굉장한 도움을 주는 것 같다. 
        type 이 자신이 작성한 컴포넌트를 가진다 하더라도 결국 렌더링 할 때는 해당 컴포넌트의 Element 와 합치게 된다.
        children 은 해당 태그가 가지는 string 내용일 수도 있고 또 다른 html 태그 혹은 또 다른 컴포넌트일 수도 있다는 것을 알아두면 좋을 것 같다.
