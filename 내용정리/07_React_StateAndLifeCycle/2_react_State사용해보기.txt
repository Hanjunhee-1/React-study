이번에는 state 와 LifeCycle 에 대해 코드를 작성해보며 더 자세히 알아볼 것이다.

'/06_실습_State사용해보기' 디렉토리에서 작성했다.

이번에 작성해볼 Component 는 알림에 대한 것이다. 지난번에 작성했던 댓글 Component 와 비슷하다.

우선 알림에 대한 정보를 나타내줄 알림 Component 를 작성했다.
```
    // Notification.jsx
    import React from "react";

    const styles = {
        wrapper: {
            margin: 8,
            padding: 8,
            display: 'flex',
            flexDirection: 'row',
            border: '1px solid gray',
            borderRadius: 16,
        },
        messageText: {
            color: 'black',
            fontSize: 16,
        },
    };

    export default class Notification extends React.Component {
        constructor(props) {
            super(props);

            this.state = {};
        }

        componentDidMount() {
            console.log(`${this.props.id} Mount 되었습니다.`);
        }
        
        componentDidUpdate() {
            console.log(`${this.props.id} Update 되었습니다.`);
        }

        componentWillUnmount() {
            console.log(`${this.props.id} Unmount 되었습니다.`);
        }

        render() {
            return (
                <div style={styles.wrapper}>
                    <span style={styles.messageText}>{this.props.message}</span>
                </div>
            )
        }
    }
```
class 형 Component 로 작성했다. LifeCycle 에 대해서 알아보기 위해 Mount, Update, Unmount 와 관련된 함수들을 작성했다.

```
    // NotificationList.jsx
    import React from "react";
    import Notification from "./Notification";

    const reservedNotifications = [
        {
            id: 1,
            message: '안녕하세요. 오늘 일정을 알려드립니다.'
        },
        {
            id: 2,
            message: 'study 시간입니다.'
        },
        {
            id: 3,
            message: '10분 후 회의가 시작됩니다.'
        },
    ];

    export default class NotificationList extends React.Component {
        constructor(props) {
            super(props);

            this.state = { notifications: [] };
        }

        componentDidMount() {
            const { notifications } = this.state;
            let timer = setInterval(() => {
                if (notifications.length < reservedNotifications.length) {
                    const index = notifications.length;
                    notifications.push(reservedNotifications[index]);
                    this.setState({
                        notifications,
                    });
                } else {
                    this.setState({
                        notifications: []
                    });
                    clearInterval(timer);
                }
            }, 3000);
        }

        render() {
            return (
                <div>
                    {
                        this.state.notifications.map((notification) => {
                            return (
                                <Notification key={notification.id} id={notification.id} message={notification.message} />
                            )
                        })
                    }
                </div>
            )
        }
    }
```
코드를 보고 좀 어렵다고 느껴질 수 있는데 자세히보면 그리 어렵지 않다.
우선 생성자 부분에서 notifications 라는 값을 list 형태로 선언하여 관리한다.

Component 가 Mount 즉, NotificationList Component 가 생성될 때 componentDidMount() 의 함수 내용이 실행된다.
내용을 간단하게 보자면 state 에 담긴 notifications list 를 가져오고 setInterval() 함수를 실행한다.
만약 현재 notifications 의 length 가 reservedNotifications 의 length 보다 작다면 if 문 내부를 실행하는데 내용은 다음과 같다.
일단 현재 notifications 의 length 를 index 에 저장한다. 현재 notifications 에 아무것도 없다면 index 는 0이다.
그리고 notifications list 에 reservedNotifications[index] 를 push 한다. notifications 에 아무것도 없다면 reservedNotifications[0] 을 push 하는데 첫번째 알림을 push 하는 것이다.
그리고 setState() 함수를 통해 notifications 의 값을 업데이트해준다. 
if 문을 만족하지 못하게 된다면 else 문을 실행하는데 내용은 다음과 같다.
setState() 함수로 notifications 의 내용을 싹 비워주고 
clearInterval() 함수의 매개변수로 timer 를 넘겨서 해당 interval 을 끝낸다.
이 과정은 3초마다 한 번씩 일어난다. 

render 부분에서는 state 의 notifications list 를 map() 함수를 통해 담겨있는 값에 하나하나씩 접근하여
해당 값의 id 와 message 를 넘겨준다.

※  key 와 id 라는 props 는 넘겨주지 않으면 경고문이 뜬다. 해당 부분은 chrome 개발자 도구에서 확인할 수 있다.
    LifeCycle 이 어떻게 구성되는지는 React 앱을 실행시키고 NotificationList 부분을 보면 알 수 있다.
    chrome 웹 스토어에서 'React Developer Tools' 를 다운받아서 꼭 확인해보자