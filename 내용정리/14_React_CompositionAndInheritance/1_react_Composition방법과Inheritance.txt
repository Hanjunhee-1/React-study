★  Composition

    여러 개의 컴포넌트를 합쳐서 새로운 컴포넌트를 만드는 것을 의미한다.
    무작정 컴포넌트를 합치는 것이 중요한 것이 아니라 어떻게 잘 합칠 것인지를 생각하는 것이 중요하다.
    컴포넌트를 합칠 때도 여러 방식이 있는데 다음과 같다.

    1.  Containment
        하위 컴포넌트를 포함하는 형태의 합성 방법이다. Sidebar 혹은 Dialog 같은 box 형태의 컴포넌트는
        자신의 하위 컴포넌트를 미리 알 수 없다. 
        Containment 를 통해 Composition 을 구현하려면 props 중에 children 을 사용하면 된다!
        ※  해당 부분이 잘 생각나지 않으면 내용정리 폴더의 4~6 까지를 다시 공부하자.
        ```
            function FancyBorder(props) {
                return (
                    <div className={'FancyBorder FancyBorder-' + props.color}>
                        {props.children}
                    </div>
                )
            }
        ```
        이렇게 하면 하위 컴포넌트를 props.children 부분에서 모두 렌더링하게 된다.

    2.  Specialization
        'WelcomDialog 는 Dialog 의 특별한 케이스이다.'
        Dialog 는 범용적인 것인데 그 중에서 방문자를 환영하는 WelcomDialog 는 특별한 것이다.
        이렇게 범용적인 개념을 구별이 되게 구체화하는 것을 Specialization 이라고 한다.

        객체지향언어에서는 상속(Inheritance) 을 사용하여 Specialization 을 구현한다.
        하지만 React 에서는 Composition 을 통해 Specialization 을 구현한다.
        ```
            function Dialog(props) {
                return (
                    <FancyBorder color='blue'>
                        <h1 className='Dialog-title'>
                            {props.title}
                        </h1>
                        <p className='Dialog-message'>
                            {props.message}
                        </p>
                    </FancyBorder>
                )
            }

            function WelcomDialog(props) {
                return (
                    <Dialog
                        title='어서오세요'
                        message='방문하신 것을 환영합니다.'
                    />
                )
            }
        ```
        예시를 보면 Dialog 함수의 title 과 message 는 어떤 내용을 넣느냐에 따라 달라질 수 있다.
        그 중에서 WelcomDialog 를 보면 Dialog 컴포넌트를 사용함으로써 WelcomDialog 컴포넌트로서의
        기능을 할 수 있게 된다. 범용적인 컴포넌트를 만들어두고 특별한 컴포넌트를 만들어 가져다 쓰는 방법이 Specialization 방법이다.

    3.  Containment 와 Specialization
        위의 2가지 방법을 동시에 사용하는 예시를 보자.
        ```
            function Dialog(props) {
                return (
                    <FancyBorder color='blue'>
                        <h1 className='Dialog-title'>
                            {props.title}
                        </h1>
                        <p className='Dialog-message'>
                            {props.message}
                        </p>
                    </FancyBorder>
                )
            }

            function SignUpDialog(props) {
                const [nickname, setNickname] = useState('');

                const handleChange = (event) => {
                    setNickname(event.target.value);
                }

                const handleSignUp = () => {
                    alert(`환영합니다, ${nickname}님`);
                }

                return (
                    <Dialog title='다 같이 React 공부하는 사이트!' message='닉네임을 입력해주세요!'>
                        <input value={nickname} onChange={handleChange} />
                        <button onClick={handleSignUp}>가입하기</button>
                    </Dialog>
                )
            }
        ```
        SignUpDialog 컴포넌트에서 Dialog 컴포넌트를 사용하고 있다. title 과 message 속성을 주어 사용하는 것은
        Specialization 에 해당하는 것이고 input 및 button 에 대한 것은 Containment 방식에 해당한다.
        이처럼 Composition 방법을 사용하여 다양한 컴포넌트를 만들어줄 수 있다. 


★  Inheritance

    Composition 의 개념과는 반대되는 개념이다.
    다른 컴포넌트로부터 상속을 받아서 새로운 컴포넌트를 만드는 것이다.

    하지만 공식문서나 Meta 를 보면 Inheritance 를 통해 컴포넌트를 만든 좋은 예시가 없고
    Composition 을 통해 만든 사례만 있다.

    이를 통해 알 수 있는 것은 
    '복잡한 컴포넌트를 분할해서 여러 개의 컴포넌트로 만들고, 만든 컴포넌트들을 조합해서 새로운 컴포넌트를 만드는 것' 이
    React 컴포넌트 개발에 있어서 중요하게 생각해야 될 것이라는 것을 알 수 있다.