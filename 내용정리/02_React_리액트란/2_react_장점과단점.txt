★  장점

    (1) 빠른 업데이트와 렌더링 속도
        어떤 웹 페이지에 접속하여 버튼을 눌렀다. 해당 버튼은 자신이 보고 있는 페이지를 다른 페이지로 변경하는 버튼이었다.
        만약 버튼을 눌렀는데 빨리 바뀌지 않았다면? 사용자들은 참지 못하고 나가버릴 것이다...
        때문에 빠른 업데이트는 굉장히 중요한 요소 중에 하나이다.
        
        React 는 해당 부분을 해결하기 위해 'VirtualDOM' 이라는 것을 사용한다.

        VirtualDOM 이란?
        우선 DOM 이 무엇인지 알아야 한다. DOM 은 Document Object Model 의 약자로 웹 페이지를 정의하는 하나의 객체이다.
        하나의 웹 페이지 정보를 모두 담고 있는 그릇이라고 생각하면 쉽다.

        그래서 웹 페이지가 업데이트 된다는 것은 DOM 이 수정된다는 말과 같다!
        기존의 방식은 업데이트 해야하는 부분이 얼마 없음에도 불구하고 DOM 을 모두 수정해야 했는데
        VirtualDOM 은 업데이트 해야하는 부분만 수정한다. 때문에 빠른 업데이트와 렌더링이 가능하다!

    (2) Component 기반
        Component 는 구성요소라는 뜻을 가지고 있는데 하나의 웹 페이지는 여러 Component 로 구성되어 있고
        하나의 Component 는 또다른 여러 Component 를 가질 수 있다.

        Component 의 장점은 무엇일까?
        바로 재사용성이다. 재사용성은 말 그대로 다시 사용이 가능하다는 것을 뜻한다.
        물리적으로 존재하는 물질들은 쓰면 쓸수록 형태나 성질이 바뀌기 때문에 재사용이라는 말보다
        '재활용' 이라는 말을 많이 쓴다. 때문에 '재사용' 은 IT 관련 공부를 할때 많이 듣게 된다.

        모든 것을 재사용 할 수 있는 것인가?
        그렇지 않다. 예를 들어 Calendar 모듈과 String 모듈이 있다고 해보자.
        String 모듈은 독립적인 모듈이어서 언제든지 그대로 재사용이 가능하다. 하지만 Calendar 모듈은
        Date 모듈에 의존하고 있기 때문에 Date 모듈이 없다면 재사용이 불가능하다. 이렇게 의존성 문제 때문에 항상 재사용이 가능한 것은 아니다.

        재사용성이 높을 때 장점은 개발 기간이 단축된다는 것이다. 새로 개발하려는 것이 기존에 개발해두었던 것과 겹치는 부분이 있다면
        그대로 가져다 쓸 수 있다. 뿐만 아니라 유지 보수도 쉬워진다.

    (3) React Native
        React Native 는 android, ios 의 앱 개발 언어이다. React 를 배웠다면 어렵지 않게 배울 수 있다고 한다.

★  단점

    (1) 방대한 학습량
        VirtualDOM, JSX, Component, State, Props 등 배워야 할 것이 많다. 다른 것을 배울 때도 배울 게 많겠지만 React 도 배울게 많은 것으로
        소문이 났다고...

    (2) 자주 일어나는 업데이트  
        계속 뭐가 바뀐다... 지속적으로 공부하고 학습해야 React 를 잘 다룰 수 있다.

    (3) 높은 상태관리 복잡도
        State 는 React Component 의 상태를 의미한다. VirtualDOM 에서 업데이트 해야할 부분만 업데이트 한다고 했는데 업데이트 된 것은 
        State 가 바뀐 것이다. 성능 최적화를 위해서는 이 State 를 잘 관리해야 하는데 꽤 어렵다...