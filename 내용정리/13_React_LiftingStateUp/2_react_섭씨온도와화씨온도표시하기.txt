이번에는 섭씨온도와 화씨온도 중 아무것이나 입력하면 섭씨온도는 화씨온도로 화씨온도는 섭씨온도로 변환하여 표시해주고
물이 끓는지 안 끓는지도 알려주는 그러한 컴포넌트를 만들어 볼것이다.

우선 온도를 입력하는 컴포넌트를 만들어준다.
```
    // TemperatureInput.jsx
    const scaleNames = {
        c: '섭씨',
        f: '화씨',
    };

    export default function TemperatureInput(props) {
        const handleChange = (event) => {
            props.onTemperatureChange(event.target.value);
        };

        return (
            <fieldset>
                <legend>
                    온도를 입력해주세요(단위:{scaleNames[props.scale]}):
                </legend>
                <input value={props.temperature} onChange={handleChange} />
            </fieldset>
        )
    }
```
scaleNames 는 섭씨 혹은 화씨로 입력하는 칸을 나눠주기 위해 만들어준 object 이다.
TemperatureInput 함수의 내부를 보면 onChange 로 handleChange 함수를 사용하는데
handleChange 함수 내부를 보면 좀 신기하게 되어있다. 바로 매개변수로 받은 props 의 onTemperatureChange() 라는
함수를 사용한다는 것이다. 해당 부분은 상위 컴포넌트에서 공유해준 결과를 사용하여 값이 바뀔 때마다 하위 컴포넌트에서도
값이 변할 수 있게 해주는 부분이다.

```
    // Calculator.jsx
    import { useState } from "react";
    import TemperatureInput from "./TemperatureInput";

    function BoilingVerdict(props) {
        if (props.celius >= 100) {
            return <p>물이 끓습니다.</p>
        }
        return <p>물이 끓지 않습니다.</p>
    }

    function toCelius(fahrenheit) {
        return((fahrenheit - 32) * 5) / 9;
    }

    function toFahrenheit(celius) {
        return (celius * 9) / 5 + 32;
    }

    function tryConvert(temperature, convert) {
        const input = parseFloat(temperature);
        
        if (Number.isNaN(input)) {
            return '';
        }

        const output = convert(input);
        const rounded = Math.round(output * 1000) / 1000;
        return rounded.toString();
    }


    export default function Calculator(props) {
        const [temperature, setTemperature] = useState('');
        const [scale, setScale] = useState('c');

        const handleCeliusChange = (temperature) => {
            setTemperature(temperature);
            setScale('c');
        }

        const handleFahrenheitChange = (temperature) => {
            setTemperature(temperature);
            setScale('f');
        }

        const celius = scale === 'f' ? tryConvert(temperature, toCelius) : temperature;
        const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;

        return (
            <div>
                <TemperatureInput 
                    scale='c'
                    temperature={celius}
                    onTemperatureChange={handleCeliusChange}
                />
                <TemperatureInput 
                    scale='f'
                    temperature={fahrenheit}
                    onTemperatureChange={handleFahrenheitChange}
                />
                <BoilingVerdict celius={parseFloat(celius)}/>
            </div>
        )
    }
```
내용이 많지만 하나씩 보면 어렵지 않다. 먼저 BoilingVerdict() 는 섭씨온도가 100도 이상이면 물이 끓는다고 표시해주고
그렇지 않으면 물이 끓지 않는다고 표시해준다.

그 다음 toCelius() 와 toFahrenheit() 는 각각 화씨온도를 섭씨온도로 섭씨온도를 화씨온도로 바꿔주는 함수이다.

다음으로 tryConvert() 인데 이 부분은 좀 헷갈릴 수도 있을 것같다. 우선 해당 함수에서는 매개변수로 temperature 와 convert 라는 것을 받는다.
input 이라는 변수에 매개변수로 입력받은 temperature 를 실수형으로 파싱하여 저장한다.
만약 input 에 아무것도 없다면 빈 문자열을 반환해준다. 이 부분은 사용자가 숫자가 아닌 문자열을 입력했을 경우에 대한 예외처리도 동시에 해준다.
output 이라는 변수에 매개변수로 입력받은 convert 에 input 을 매개변수로 주고 그 반환값을 저장한다.
여기서 알수 있는것은 convert 자리에는 함수가 와야 한다는 것이다.
rounded 라는 변수에는 소수점 자리와 관련된 작업을 해주고 저장해준뒤에 최종적으로 tryConvert() 함수에서는 rounded 를 
문자열 형태로 반환해준다.


이제 본격적으로 Calculator 컴포넌트를 작성한다.
우선 temperature 와 scale 을 useState 로 관리해준다.
그리고 handleCeliusChange() 와 handleFahrenheitChange() 함수가 있는데 각각의 함수는
사용자로부터 입력받은 값을 섭씨인지 화씨인지 판별하여 useState 로 관리되는 temperature 와 scale 에 저장하는 기능을 한다.
celius 라는 변수에는 만약 사용자가 화씨온도를 입력했다면 tryConvert() 의 매개변수로 temperature 와 toCelius() 를 주어 해당 반환값을
저장한다. 아니라면 섭씨온도를 입력했다는 것이므로 입력받은 값 그대로 저장한다. fahrenheit 변수도 화씨 표시에 대한 동일한 기능을 한다.

이제 return 문에서 작성해두었던 TemperatureInput 컴포넌트를 통해 렌더링해준다.
맨 첫번째 컴포넌트에서는 섭씨온도를 입력받을 수 있게 할 것이다. 때문에 scale 은 'c' 로 설정하고
온도는 celius 변수를 준다. 사용자가 바꿔주는 경우에 대해서는 handleCeliusChange() 를 사용할수 있도록 한다.

두번째 컴포넌트에서는 화씨온도를 입력받을 수 있게 할 것이다. 때문에 scale 은 'f' 로 설정하고 
온도는 fahrenheit 변수를 준다. 사용자가 바꿔주는 경우에 대해서는 handleFahrenheitChange() 를 사용할수 있도록 한다.


전체적인 흐름을 보면 다음과 같다.
1. TemperatureInput 컴포넌트의 내용이 렌더링된다.
2. 사용자는 섭씨온도 또는 화씨 온도를 입력한다.
    2-1. 섭씨 온도를 표시해주는 곳은 TemperatureInput 컴포넌트에 props 로 scale, temperature, onTemperatureChange 를 넘겨준다.
    2-2. 만약 사용자가 섭씨온도를 입력했다면 onChange 함수가 실행된다.
    2-3. onChange 함수 안에 있는 handleChange 함수에서는 props 의 onTemperatureChange 함수가 실행된다.
    2-4. onTemperatureChange 함수는 Calculator 컴포넌트에서 확인할수 있는데 onTemperatureChange 라는 속성에
         handleCeliusChange 함수가 들어있다. 
    2-5. 해당 함수에서는 setTemperature 를 통해 temperature 를 바꿔주고, setScale 을 통해 scale 을 바꿔준다.
    2-6. 이렇게 되면 현재 celius 라는 변수에는 사용자가 입력한 값 그대로 temperature 에 들어간다.
    2-7. fahrenheit 라는 변수에는 tryConvert() 함수가 실행되어 그 값이 저장되게 된다.
    2-8. 이제 fahrenheit 변수의 값을 알게되었으니 화씨온도를 표현해주는 곳에 섭씨온도가 화씨온도로 변환되어 표시된다.
3. 섭씨온도를 입력했을 때만이 아닌 화씨온도를 입력했을 때에 대해서도 위의 과정이 진행된다.


대충 흐름을 알았으니 index.js 에 컴포넌트를 렌더링해준다.
```
    // index.js
    ...
    import Calculator from './13_실습_섭씨온도와화씨온도표시하기/Calculator';

    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(
        <React.StrictMode>
            <Calculator />
            ...
        </React.StrictMode>,
        document.getElementById('root')
    );
```

이번 컴포넌트를 보면 하위 컴포넌트에서 부모 컴포넌트의 useState 로 관리되는 변수들을 가져다 쓰는 것을 볼수 있었다.
해당 방식이 Lifting State Up 즉, state 를 공유하는 방식이라는 것을 잘알고 있으면 좋을 것 같다.  