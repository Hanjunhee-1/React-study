★  State

    영단어 State 란 '상태' 를 뜻하는 단어이다.
    React 에서의 State 는 'Component 의 상태' 를 뜻한다.
    단, Component 가 정상인지 아닌지를 나타낸다기 보다는
    
    Component 에 존재하는 '데이터' 의 상태를 의미한다.

    State 는 Component 내부에서 'mutable' 즉, 변경이 가능한 데이터를 State 라고 부르는 것이다.

    State 는 미리 정의되어있고 그런 것이 아닌 오직 개발자가 직접 정의하여 사용하는 것이다.

    ※  State 사용시 주의할 점

        반드시 렌더링이나 데이터 흐름에 사용되는 값만 State 에 포함시켜야 한다!
        왜냐하면 State 가 바뀔 때마다 Component 가 다시 렌더링되는데 
        불필요한 값을 State 로 지정하여 그 값이 바뀌게 된다면 성능에도 문제가 생길 수 있기 때문이다.

    이렇게 보다보니 State 가 굉장히 어려운 것처럼 보이지만 간단히 생각하면 그냥 
    JavaScript 의 객체이다.

    State 와 함께 쓰이는 것이 있는데 바로 setState() 함수이다.
    State 는 직접 수정할수는 있지만 그래서는 안된다.
    때문에 State 의 값을 수정할 때는 반드시 setState() 함수로 값을 변경한다.

    일단 State 를 사용한 예제를 한번보는 것이 좋을 것 같다!
    (참고로 '/5_React_RenderingElements/3_react_시계만들기' 에서 State 에 대한 내용이 나온 적이 있으니 이번 내용과 같이 보아도 좋을 것같다!)
    ```
        class LikeButton extends React.Component {
            constructor(props) {
                super(props);

                this.state = {
                    liked: false,
                }
            }

            ...
        }
    ```
    State 는 React.Component 를 상속받아 사용하는 class 에서 사용한다.
    위의 코드에서 constructor(props) 즉, 생성자에 props 라는 매개변수를 넘겨주어서 사용하는 것을 볼 수 있는데
    new LikeButton(props) 이런 식으로 호출이 될 것이라는 것을 알 수 있다.
    즉, <LikeButton /> 이런 식으로 class Component 를 사용하면 React.Component 라는 클래스의 생성자에
    해당 클래스를 생성할때 받은 props 를 전부 넘겨주는 것이다.

    그 다음으로 가장 중요한 state 이다. 
    this.state = {} 이런식으로 JavaScript 객체로 관리해야할 데이터들을 state 라는 object 형태로 저장한다.

    만약 어떤 버튼을 눌렀을 때 liked 라는 값을 true 로 변경하고 싶다면?
    onClick() 액션이 요청되었을 때 setState({ liked: true }); 이런식으로 해결하면 될것이다.
    

★  LifeCycle

    영단어 LifeCycle 은 '생명주기' 를 뜻한다.
    React 에서의 LifeCycle 은 React Component 의 생명주기를 의미하는 것이다.

    class 형태의 React Component LifeCycle 은 아래의 3단계로 나누어진다.

        (1) Mounting
            Mounting 은 사람으로 치면 '출생' 단계로 constructor() 즉, 생성자를 통해
            해당 Component 가 생성된 시기를 의미한다.
            componentDidMount() 라는 함수를 사용한다.

        (2) Updating
            Updating 은 사람으로 치면 '인생' 단계로 새로운 props 를 받아 Component 가 렌더링되고
            state 와 setState 를 통해 상태가 관리되며 state 에 의해 Component 가 업데이트되어
            다시 렌더링 되는 등의 시기를 의미한다.
            componentDidUpdate() 라는 함수를 사용한다.

        (3) Unmounting
            Unmounting 은 사람으로 치면 '사망' 단계이다. 즉, 이제 더이상 쓸모없는 시기를 의미한다.
            componentWillUnmount() 라는 함수를 사용한다.

    
※  State 와 LifeCycle 은 class 형 Component 를 사용할 때 필요한 개념이다.
    하지만, 현재는 class 형 Component 보다 function 형 Component 를 더 많이 사용하기 때문에
    LifeCycle 에 대해서는 더 자세히 다루지 않았다.

    기억해야 될것:
    Component 는 계속 존재하는 것이 아닌
    시간의 흐름에 따라 생성되고 업데이트 되다가 사라진다.