★  Hooks

    class 형 컴포넌트에서는 생성자에서 state 를 정의하고
    setState() 함수를 통해 state 를 업데이트 할 수 있으며
    LifeCycle 과 관련된 methods 를 사용할 수 있다.

    하지만, function 형 컴포넌트에서는 state 를 사용할 수 없고
    LifeCycle 에 따른 기능을 구현하는 것이 불가능하다.

    그래서, function 형 컴포넌트에서도 class 형 컴포넌트처럼 기능을 구현할 수 있도록
    해주는 것이 바로 Hooks 이다.


★  대표적인 Hooks

    (1) useState()

        가장 대표적으로 많이 사용된다.
        이름에서부터 알 수 있듯이 state 를 사용하기 위한 Hook 이다.

        사용법 예시는 다음과 같다.
        ```
            const [ 변수명, set함수명 ] = useState(변수의 초기값);
        ```
        위의 예시 코드를 function 형 컴포넌트 내부에서 선언하여 사용하면 된다.
        만약 count 라는 변수를 만들어 해당 변수의 state 를 관리하고 싶다면

        ``` 
            const [ count, setCount ] = useState(0);
        ```
        이런 식으로 사용할 수 있다.

    
    (2) useEffect()

        Side effect 를 수행하기 위한 Hook 이다.
        Side effect 는 '부작용' 이라는 뜻이다.
        부정적인 의미로 생각할 수 있지만 React 에서의 
        Side effect 는 '효과' 혹은 '영향' 을 뜻한다.

        useEffect() 는 class 형 컴포넌트에서 제공하던 componentDidMount(), componentDidUpdate(), componentWillUnmount()를 
        통합적으로 제공하는 Hook 이다.

        사용법 예시는 다음과 같다.
        ```
            useEffect(effect 함수, 의존성 배열);
        ```
        의존성 배열은 말 그대로 effect 가 의존하고 있는 배열을 뜻하는데
        의존성 배열 안의 변수 중 하나라도 변경되었을 때 실행된다.

        만약 effect 함수가 Mount, Unmount 시에 단 한번씩만 실행되게 하고 싶으면 
        ```
            useEffect(effect 함수, []);
        ```
        이렇게 빈 배열을 넘겨주면 된다.

        배열 부분을 생략할 수도 있는데 컴포넌트가 업데이트 될때마다 실행된다.

        useEffect() 는 조금 어려운 감이 있어서 자세히 써보면 아래와 같다.
        ```
            useEffect(() => {
                /**
                    컴포넌트가 Mount 된 이후,
                    의존성 배열에 있는 변수들 중 하나라도 값이 변경되었을 때 실행됨
                    의존성 배열에 빈 배열을 넣으면 Mount 와 Unmount 시에 단 한 번씩만 실행됨
                    의존성 배열을 생락한다면 컴포넌트가 업데이트 될때마다 실행됨
                */
                return () => {
                    // 컴포넌트가 Unmount 되기 전에 실행된다.
                }
            }, [의존성 변수1, 의존성 변수2, ...]);
        ```