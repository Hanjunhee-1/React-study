이번에는 지금까지 배운 것들을 토대로 시계를 만드는 실습을 해볼 것이다.

우선 시간을 보여주는 시계 컴포넌트를 생성했다.
```
    // Clock.jsx
    function Clock(props) {
        return (
            <div>
                <h1>Hello, React!</h1>
                <h2>현재 시간: {new Date().toLocaleTimeString()}</h2>
            </div>
        );
    }

    export default Clock;
```
'{}' 중괄호로 둘러쌓인 부분은 JavaScript 문법을 사용하는 부분이다. 


그리고 index.js 에 아래의 내용을 추가해주었다.
```
    // index.js
    import Clock from './03_실습_시계만들기/Clock';
    ...

    setInterval(() => {
        root.render(
            <React.StrictMode>
                <Clock/>
            </React.StrictMode>  )
    }, 1000);
```
여기서 사용한 setInterval() 이라는 함수는 웹 페이지의 특정 부분을 주기적으로 업데이트 해줘야 할 때 사용하는 함수이다.
첫번째 인자로는 실행할 코드를 받고 두번째 인자로 ms 단위의 시간을 입력받는다. 
즉, index.js 의 추가된 코드를 해석해보자면 1초마다 렌더링을 해주는 것이다. 

※  왜 1초마다 렌더링 해줘야 할까...?
    현재 Clock 컴포넌트에서 시간을 보여주고 있기는 하지만 그 함수는 말 그대로 '딱 한 번만' 시간을 보여주고 끝낸다.
    즉, 시간은 계속 흐르고 있음에도 Element 가 렌더링 된 그 순간의 시간만을 보여주게 되는 것이다. 때문에 
    setInterval() 함수를 통해 1초마다 해당 컴포넌트를 렌더링하게끔 해야 우리가 원하는 정상적인 시계의 기능을 할 수 있는 것이다.

index.js 에서 원래 root 를 렌더링해주던 코드 밑에 새로 위의 예시를 추가했는데 이랬더니 React 프로젝트를 시작했을 때
탭이 2개가 뜬다... 해당 문제는 나중에 수정을 해야할 것 같다....


