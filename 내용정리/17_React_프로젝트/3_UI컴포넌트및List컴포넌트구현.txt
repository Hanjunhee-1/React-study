UI 관련 컴포넌트를 먼저 구현했다.

```
    // Button.jsx
    import styled from 'styled-components';

    const StyledButton = styled.button`
        padding: 8px 16px;
        font-size: 16px;
        border-width: 1px;
        border-radius: 8px;
        cursor: pointer;
    `;

    export default function Button(props) {
        const { title, onClick } = props;

        return (
            <StyledButton onClick={onClick}>
                {title || 'button'}
            </StyledButton>
        )
    }
```
```
    // TextInput.jsx
    import styled from "styled-components";

    const StyledTextarea = styled.textarea`
        width: calc(100% - 32px);
        ${(props) => 
            props.height && `height: ${props.height}px;`
        }
        padding: 16px;
        font-size: 16px;
        line-height: 20px;
    `;

    export default function TextInput(props) {
        const { height, value, onChange } = props;

        return (
            <StyledTextarea height={height} value={value} onChange={onChange} />
        )
    }
```
사용자에게 보여지는 것들 중에서 입력 창이라던가 버튼 같은 것들을 구현한 것이다.

그 다음으로는 list 와 관련된 컴포넌트들을 구현했다. 
```
    // PostListItem.jsx
    import styled from "styled-components";

    const Wrapper = styled.div`
        width: calc(100% - 32px);
        padding: 16px;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        justify-content: center;
        border: 1px solid gray;
        border-radius: 8px;
        cursor: pointer;
        background: white;
        :hover {
            background: lightgray;
        }
    `;

    const TitleText = styled.p`
        font-size: 20px;
        font-weight: 500;
    `;

    export default function PostListItem(props) {
        const { post, onClick } = props;

        return (
            <Wrapper onClick={onClick}>
                <TitleText>{post.title}</TitleText>
            </Wrapper>
        )
    }
```
```
    // PostList.jsx
    import styled from "styled-components";
    import PostListItem from "./PostListItem";

    const Wrapper = styled.div`
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        justify-content: center;
        
        & > * {
            :not(:last-child) {
                margin-bottom: 16px;
            }
        }
    `;

    export default function PostList(props) {
        const { posts, onClickItem } = props;

        return (
            <Wrapper>
                {posts.map((post, index) => {
                    return (
                        <PostListItem
                            key={post.id}
                            post={post}
                            onClick={() => {
                                onClickItem(post);
                            }}
                        />
                    )
                })}
            </Wrapper>
        )
    }
```
PostListItem 은 글의 제목을 보여주는 것이고 PostList 는 Item 들을 list 로 정리한 것이다.

```
    // CommentListItem.jsx
    import styled from "styled-components";

    const Wrapper = styled.div`
        width: calc(100% - 32px);
        padding: 16px;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        justify-content: center;
        border: 1px solid gray;
        border-radius: 8px;
        cursor: pointer;
        background: white;
        :hover {
            background: lightgray;
        }
    `;

    const ContentText = styled.p`
        font-size: 14lpx;
    `;

    export default function CommentListItem(props) {
        const { comment } = props;

        return (
            <Wrapper>
                <ContentText>{comment.content}</ContentText>
            </Wrapper>
        )
    }
```
```
    // CommentList.jsx
    import styled from "styled-components";
    import CommentListItem from "./CommentListItem";

    const Wrapper = styled.div`
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        justify-content: center;

        & > * {
            :not(:last-child) {
                margin-bottom: 16px;
            }
        }
    `;

    export default function CommentList(props) {
        const { comments } = props;

        return (
            <Wrapper>
                {comments.map((comment, index) => {
                    return (
                        <CommentListItem key={comment.id} comment={comment} />
                    )
                })}
            </Wrapper>
        )
    }
```
댓글 관련 컴포넌트들도 post 컴포넌트와 똑같다. 