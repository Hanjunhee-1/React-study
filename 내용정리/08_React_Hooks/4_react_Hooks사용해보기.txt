이번에는 Custom Hook 과 useState(), useEffect() Hook 을 사용한
컴포넌트를 만들어볼 것이다.

만들 컴포넌트의 내용은 아래와 같다.
    ※  '입장' 이라는 버튼과 '퇴장' 이라는 버튼이 있고
        처음 수용 인원은 0명에서 시작한다.
        입장 버튼을 클릭할 시에 수용 인원이 1씩 증가한다.
        퇴장 버튼을 클릭할 시에 수용 인원이 1씩 감소한다.
        최대 수용 인원은 10명이며 최소 수용 인원은 0명이다.
        만약 현재 수용 인원이 최대 수용 인원과 같다면 입장 버튼을 비활성화하고
        현재 수용 인원이 최소 수용 인원과 같다면 퇴장 버튼을 비활성화 한다.


수용 인원의 수, 수용 인원에 대한 상태를 관리하려면 useState Hook 을 사용해야 하고
버튼 비활성화 관련된 것을 구현하기 위해서는 useEffect Hook 까지 사용해야한다.

Custom Hook 으로 수용 인원 수에 대한 상태를 관리해보려고 한다.
아래와 같이 Custom Hook 을 작성해주었다.
```
    // useCounter.jsx
    import { useState } from "react";

    export default function useCounter(initValue) {
        const [count, setCount] = useState(initValue);


        const increaseCount = () => {
            setCount((count) => count + 1);
        }
        const decreaseCount = () => {
            if (count >= 1) {
                setCount((count) => count - 1);
            } else {
                console.log("퇴장할 인원이 없습니다.");
            }
        }

        return [count, increaseCount, decreaseCount];
    }
```
우선 매개변수를 받는다. 처음 시작인원은 어처피 0명부터 시작하므로 크게 상관이 없지만
그냥 매개변수를 받는 형태로 해보았다. count 와 그것을 관리해주는 setCount 를 useState 로 관리해주었고
count 의 초기값을 매개변수로 받은 initValue 로 설정해준다.

그 다음은 increaseCount 와 decreaseCount 라는 함수이다. count 값 증감과 관련한 함수이다.

그 다음으로는 실제 수용 인원에 대한 정보를 나타내줄 컴포넌트를 작성했다.
```
    // Accomodate.jsx
    import { useEffect } from "react";
    import { useState } from "react";
    import useCounter from "./useCounter";

    const MAX_CAPACITY = 10;

    export default function Accomodate(props) {
        const [isFull, setIsFull] = useState(false);
        const [isEmpty, setIsEmpty] = useState(false);
        const [count, increaseCount, decreaseCount] = useCounter(0);
        

        useEffect(() => {
            console.log("####################");
            console.log("useEffect() is called");
            console.log(`isFull: ${isFull}`);
        });

        useEffect(() => {
            setIsFull(count >= MAX_CAPACITY);
            setIsEmpty(count <= 0);
            console.log(`Current count value: ${count}`);
        }, [count]);

        return (
            <div style={{padding: 16}}>
                <p>{`총 ${count} 명 수용하고 있습니다.`}</p>

                <button onClick={increaseCount} disabled={isFull}>
                    입장
                </button>
                <button onClick={decreaseCount} disabled={isEmpty}>
                    퇴장
                </button>

                {isFull && <p style={{color: 'red'}}>정원이 가득찼습니다.</p>}
            </div>
        )
    }
```
최대 수용 인원을 따로 상수로 해줄 필요는 없지만 그냥 해줘봤다.

수용 인원이 가득 찼는지 비워져있는지에 대해 판별하기 위한 isFull 과 isEmpty 를 
useState 로 관리한다.
그리고 count, increaseCount, decreaseCount 는 배열로 담아서 작성해둔 useCounter 에서
값을 받아온다. 초기값은 0이다.

첫번째 useEffect 는 log 확인용이다. 의존성 배열 부분에 아무것도 없으니 업데이트 할 때마다 
안에 있는 내용을 실행해준다.

두번째 useEffect 는 현재 수용 인원에 따라 버튼을 비활성화 또는 활성화 해주기 위한 Hook 이다.
의존성 배열 부분에 count 가 있으니 count 의 값이 바뀔 때마다 안에 있는 내용이 실행된다.

이렇게 작성을 하고 index.js 에 작성된 코드를 수정해준다.
```
    // index.js
    ...
    import Accomodate from './08_실습_Hooks사용해보기/Accomodate';

    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(
        <React.StrictMode>
            ...
            <Accomodate />
        </React.StrictMode>,
        document.getElementById('root')
    );
```


※  useState() 는 확실히 알겠는데 useEffect() 는 아직도 좀 헷갈리긴 하는것 같다...
    그리고 useMemo(), useCallback(), useRef() 도 이론으로는 알고 있지만 실제로 어떻게 사용되는지는
    잘 모르기 때문에 찾아서 공부할 필요가 있다.
    이제 API 를 통해 서버 측에서 제공해주는 정보를 받아오는 것만 할줄 안다면 그동안 구현해두었던
    간단한 '게시판 사이트' 정도는 구현할 수 있지 않을까...