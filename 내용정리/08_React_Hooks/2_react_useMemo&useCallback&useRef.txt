★  useMemo()

    useMemo 라는 Hook 은 
    Memoized value 를 반환해주는 Hook 이다.

    Memoization 이란 최적화를 위해 사용하는 것이다.
    뭔가 연산이 오래 걸리고 양이 많은 연산을 할 때 
    이전에 저장해놨던 호출결과를 바로 반환해주는 것이다.

    일단, 사용법 예시를 보자.
    ```
        const memoizedValue = useMemo(() => {
            // 연산량이 높은 작업을 수행하여 결과를 반환
            return computeExpensiveValue(의존성 변수1, 의존성 변수2);
        }, [의존성 변수1, 의존성 변수2])
    ```
    의존성 변수가 변했는지의 여부에 따라서 변했다면 새로 연산을 하여 반환하고
    변하지 않았다면 기존에 저장해두었던 결과를 반환해준다.

    useMemo 를 사용하면 컴포넌트가 렌더링 될때마다 연산량이 높은 작업을
    반복해서 작업하는 것을 방지할 수 있다. 결과적으로는 빠른 렌더링 속도를 얻을 수 있다는 것이다.

    useEffect 와 마찬가지로 의존성 배열을 매개변수로 안 줄수도 있는데
    이러면 useMemo 에 있는 함수가 매 렌더링마다 실행되므로 의미가 없다.

    의존성 배열이 빈 배열일 경우에는 컴포넌트가 Mount 될때만 호출된다.


★  useCallback()

    useMemo 와 비슷하지만 값이 아닌 함수를 반환해준다.

    일단, 사용법 예시를 보자.
    ```
        const memoizedCallback = useCallback(() => {
            doSomething(의존성 변수1, 의존성 변수2);
        }, [의존성 변수1, 의존성 변수2])
    ```
    
    아래의 코드들은 동일한 역할을 한다.
    ```
        useCallback(함수, 의존성 배열);
        useMemo(() => 함수, 의존성 배열);
    ```


★  useRef()

    Reference 를 사용하기 위한 Hook 이다.
    Reference 는 무엇일까?

    특정 컴포넌트에 접근할 수 있는 객체를 의미한다.
    useRef 는 Reference 객체를 반환해준다.

    일단, 사용법 예시를 보자.
    ```
        const refContainer = useRef(초기값);
    ```

    useRef Hook 은 내부의 데이터가 변경되었을 때 별도로 알려주지 않는다.