이번에는 styled-components 를 사용하여 컴포넌트를 꾸며볼 것이다.

```
    // Blocks.jsx
    import styled from 'styled-components';

    const Wrapper = styled.div`
        padding: 1rem;
        display: flex;
        flex-direction: row;
        align-items: flex-start;
        justify-content: flex-start;
        background-color: lightgray;
    `;

    const Block = styled.div`
        padding: ${(props) => props.padding};
        border: 1px solid black;
        border-radius: 1rem;
        background-color: ${(props) => props.backgroundColor};
        color: white;
        font-size: 2rem;
        font-weight: bold;
        text-align: center;
    `

    const blockItems = [
        {
            label: '1',
            padding: '1rem',
            backgroundColor: 'red',
        },
        {
            label: '2',
            padding: '3rem',
            backgroundColor: 'green',
        },
        {
            label: '3',
            padding: '2rem',
            backgroundColor: 'blue',
        },
    ];

    export default function Blocks(props) {
        return (
            <Wrapper>
                {blockItems.map((blockItem) => {
                    return (
                        <Block
                            padding={blockItem.padding}
                            backgroundColor={blockItem.backgroundColor}
                        >
                        {blockItem.label}
                        </Block>
                    )
                })}
            </Wrapper>
        )
    }
```
코드가 좀 길긴한데 그리 어렵지 않다.
Wrapper 는 flex box 이고, 해당 flex box 에 Block 이라는 컴포넌트를 넣는것이다.
Block 의 style 을 보면 props 로 넘겨받은 값으로 CSS 를 지정해주는 것을 알수있다.
Blocks 컴포넌트를 보면 return 이 총 2번있는데 맨 바깥 쪽 return 은 모든 컴포넌트를 렌더링해주기 위한 것이고
그 안의 return 은 map() 함수의 매개변수로 콜백함수를 사용했기 때문이다. (정확히 말하면 {} 를 사용했기 때문에 return 을 써주어야 원하는 결과를 얻을 수 있는 것이다.)
Block 의 style 은 props 로 넘겨받은 값을 CSS 에 사용하기 때문에 props 가 존재한다.

이제 index.js 를 아래와 같이 수정해서 결과를 확인하면 된다.
```
    // index.js
    ...
    import Blocks from './16_실습_StyledComponents사용하기/Blocks';

    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(
        <React.StrictMode>
            <Blocks />,
            ...
        </React.StrictMode>,
    document.getElementById('root')
    );
```

컴포넌트를 다루는 방법과 꾸미는 방법을 어느정도 알았으니 미니 프로젝트를 할 수 있을 것 같다.