★  Context

    기존 컴포넌트의 경우 props 를 받아서 넘겨주는 식으로 사용했다.
    이 방식의 문제점이 뭐냐면 상위 컴포넌트에서 사용하는 props 를 하위 컴포넌트에서도 사용해야 될 때이다.

    props 로 일일이 데이터를 전달해줘야 하는데 로그인 여부 등과 같은 정보를 다룰 때는 굉장히 비효율적인 방식이 된다.
    이럴 때 Context 를 사용하게 되면 props 로 일일이 데이터를 전달해줄 필요 없이
    데이터를 필요로 하는 컴포넌트에 바로 데이터를 줄 수 있다.

    
★  Context 를 사용하면 좋을 때

    (1) 여러 개의 컴포넌트들이 접근해야 하는 데이터가 존재할 경우
        ex) 로그인 여부, 로그인 정보, UI 테마, 현재 언어 등...

        ```
            function App(props) {
                return <Toolbar theme='dark' />
            }

            function Toolbar(props) {
                return (
                    <div>
                        <ThemedButton theme={props.theme} />
                    </div>
                )
            }

            function ThemedButton(props) {
                return <Button theme={props.theme} />
            }
        ``` 
        위의 예시를 보면 props 를 일일이 하위 컴포넌트로 전달해주고 있다. 굉장히 비효율적이고 
        반복되는 곳이 많기 때문에 직관적이지도 않다... 때문에 아래와 같이 Context 를 활용한 코드로 리팩토링해주어야 한다.

        ```
            const ThemeContext = React.createContext('light');

            function App(props) {
                return (
                    <ThemeContext.Provider value='dark'>
                        <Toolbar />
                    </ThemeContext>
                )
            }

            function Toolbar(props) {
                return (
                    <div>
                        <ThemedButton />
                    </div>
                )
            }

            function ThemedButton(props) {
                return (
                    <ThemeContext.Consumer>
                        {value => <Button theme={value} />}
                    </ThemeContext.Consumer>
                )
            }
        ```
        Context 는 데이터를 매번 컴포넌트를 통해 전달할 필요 없이 컴포넌트 트리로 곧바로 전달하여 사용가능하다.
        위의 예시의 Context 는 테마를 위한 Context 이고 기본값은 light 이다.

        App 컴포넌트에 Provider 가 있는데 이를 통해 컴포넌트에게 현재 테마에 대한 데이터를 전달하게 된다.
        모든 하위 컴포넌트들은 컴포넌트 트리 하단에 얼마나 깊이 있는지에 따라 관계없이 데이터를 읽을 수 있다.
        테마값으로 'dark' 를 전달하고 있다.

        Toolbar 컴포넌트에서는 Context 를 사용하지 않을 경우 props 를 통해 넘겨줬어야 했는데
        Context 를 사용한 덕분에 아무것도 안해줘도 된다.

        ThemedButton 컴포넌트에 Consumer 라는 것이 있다. Consumer 를 통해 가장 가까운 상위 테마 Provider 를 찾아서
        해당 하는 값을 사용할 수 있다. 만약 해당하는 Provider 가 없을 경우 기본값인 'light' 를 사용하게 된다.
        위의 예시 코드의 경우 상위 Provider 가 존재하기 때문에 현재 테마 값은 'dark' 를 사용하게 된다.


★  Context 를 사용하기 전에 고려할 점

    무작정 Context 를 사용하는 것이 좋을까? 
    => 그렇지 않다...

    컴포넌트와 Context 가 연동되면 재사용성이 떨어지기 때문에 무조건 사용하는 것은 좋지 않다.
    오히려 이럴 경우에는 기존에 사용하던 props 를 통해 데이터를 전달해주는 방식이 좋다.